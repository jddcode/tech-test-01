// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jddcode/tech-test-ennismore/internal/weather-fetcher (interfaces: WeatherFetcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	structs "github.com/jddcode/tech-test-ennismore/internal/structs"
)

// MockWeatherFetcher is a mock of WeatherFetcher interface.
type MockWeatherFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherFetcherMockRecorder
}

// MockWeatherFetcherMockRecorder is the mock recorder for MockWeatherFetcher.
type MockWeatherFetcherMockRecorder struct {
	mock *MockWeatherFetcher
}

// NewMockWeatherFetcher creates a new mock instance.
func NewMockWeatherFetcher(ctrl *gomock.Controller) *MockWeatherFetcher {
	mock := &MockWeatherFetcher{ctrl: ctrl}
	mock.recorder = &MockWeatherFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherFetcher) EXPECT() *MockWeatherFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockWeatherFetcher) Fetch(arg0 structs.CoOrdinates) ([]structs.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].([]structs.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockWeatherFetcherMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockWeatherFetcher)(nil).Fetch), arg0)
}
